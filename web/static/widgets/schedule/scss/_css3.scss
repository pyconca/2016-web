/**
 * shiroyuki/prototype
 * CSS mixins
 *
 * @license MIT
 * @author jnopporn@shiroyuki.com
 *
 * The documentation is based on https://css-tricks.com/snippets/css/a-guide-to-flexbox/.
 */

/**
 * Combo / Flex Container with Common Setup
 */
@mixin flex-container-default() {
    @include flex-container();
    @include flex-direction(row);
    @include flex-wrap(wrap);
    @include flex-container-align-items(stretch);
}

/**
 * This defines a flex container; inline or block depending on the given value.
 * It enables a flex context for all its direct children.
 */
@mixin flex-container() {
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flex;
    display: flex;
}

/**
 * This defines the alignment along the main axis. It helps distribute extra
 * free space left over when either all the flex items on a line are inflexible,
 * or are flexible but have reached their maximum size. It also exerts some
 * control over the alignment of items when they overflow the line.
 *
 * $value:
 *
 * - flex-start (default): items are packed toward the start line
 * - flex-end: items are packed toward to end line
 * - center: items are centered along the line
 * - space-between: items are evenly distributed in the line; first item is on
 *   the start line, last item on the end line
 * - space-around: items are evenly distributed in the line with equal space
 *   around them. Note that visually the spaces aren't equal, since all the
 *   items have equal space on both sides. The first item will have one unit of
 *   space against the container edge, but two units of space between the next
 *   item because that next item has it's own spacing that applies.
 */
@mixin flex-justify-content($value) {
    -webkit-justify-content: $value;
    -moz-justify-content: $value;
    -ms-justify-content: $value;
    justify-content: $value;
}

/**
 * This is the shorthand for flex-grow, flex-shrink and flex-basis combined. The
 * second and third parameters (flex-shrink and flex-basis) are optional.
 * Default is "0 1 auto".
 *
 * It is recommended that you use this shorthand property rather than set the
 * individual properties. The short hand sets the other values intelligently.
 */
@mixin flex-item($value) {
    -webkit-flex: $value;
    -moz-flex: $value;
    -ms-flex: $value;
    flex: $value;
}

/**
 * This defines the ability for a flex item to grow if necessary. It accepts a
 * unitless value that serves as a proportion. It dictates what amount of the
 * available space inside the flex container the item should take up.
 *
 * If all items have flex-grow set to 1, every child will set to an equal size
 * inside the container. If you were to give one of the children a value of 2,
 * that child would take up twice as much space as the others.
 */
@mixin flex-grow($value) {
    -webkit-flex-grow: $value;
    -moz-flex-grow: $value;
    -ms-flex-grow: $value;
    flex-grow: $value;
}

/**
 * This defines the ability for a flex item to shrink if necessary.
 */
@mixin flex-shrink($value) {
    -webkit-flex-shrink: $value;
    -moz-flex-shrink: $value;
    -ms-flex-shrink: $value;
    flex-shrink: $value;
}

/**
 * This defines the default size of an element before the remaining space is
 * distributed. The main-size value makes it match the width or height,
 * depending on which is relevant based on the flex-direction.
 *
 * $value := <length> | auto
 *
 * If set to 0, the extra space around content isn't factored in. If set to
 * auto, the extra space is distributed based on it's flex-grow value.
 *
 * See http://www.w3.org/TR/css3-flexbox/images/rel-vs-abs-flex.svg.
 */
@mixin flex-basis($value) {
    -webkit-flex-basis: $value;
    -moz-flex-basis: $value;
    -ms-flex-basis: $value;
    flex-basis: $value;
}

/**
 * By default, flex items are laid out in the source order. However, the order
 * property controls the order in which they appear in the flex container.
 */
@mixin flex-order($value) {
    -webkit-order: $value;
    -moz-order: $value;
    -ms-order: $value;
    order: $value;
}

/**
 * This establishes the main-axis, thus defining the direction flex items are
 * placed in the flex container. Flexbox is (aside from optional wrapping) a
 * single-direction layout concept. Think of flex items as primarily laying out
 * either in horizontal rows or vertical columns.
 *
 * $direction:
 *
 * - row (default): left to right in ltr; right to left in rtl
 * - row-reverse: right to left in ltr; left to right in rtl
 * - column: same as row but top to bottom
 * - column-reverse: same as row-reverse but bottom to top
 */
@mixin flex-direction($direction) {
    -webkit-flex-direction: $direction;
    -moz-flex-direction: $direction;
    -ms-flex-direction: $direction;
    flex-direction: $direction;
}

/**
 * By default, flex items will all try to fit onto one line. You can change that
 * and allow the items to wrap as needed with this property. Direction also
 * plays a role here, determining the direction new lines are stacked in.
 *
 * $wrap:
 *
 * - nowrap (default): single-line / left to right in ltr; right to left in rtl
 * - wrap: multi-line / left to right in ltr; right to left in rtl
 * - wrap-reverse: multi-line / right to left in ltr; left to right in rtl
 */
@mixin flex-wrap($wrap) {
    -webkit-flex-wrap: $wrap;
    -moz-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    flex-wrap: $wrap;
}

/**
 * This defines the default behaviour for how flex items are laid out along the
 * cross axis on the current line. Think of it as the justify-content version
 * for the cross-axis (perpendicular to the main-axis).
 *
 * $alignment:
 *
 * - flex-start: cross-start margin edge of the items is placed on the cross-start line
 * - flex-end: cross-end margin edge of the items is placed on the cross-end line
 * - center: items are centered in the cross-axis
 * - baseline: items are aligned such as their baselines align
 * - stretch (default): stretch to fill the container (still respect min-width/max-width)
 */
@mixin flex-container-align-items($alignment) {
    -webkit-align-items: $alignment;
    -moz-align-items: $alignment;
    -ms-align-items: $alignment;
    align-items: $alignment;
}

/**
 * This aligns a flex container's lines within when there is extra space in the
 * cross-axis, similar to how justify-content aligns individual items within
 * the main-axis.
 *
 * Note: this property has no effect when there is only one line of flex items.
 *
 * $alignment:
 *
 * - flex-start: lines packed to the start of the container
 * - flex-end: lines packed to the end of the container
 * - center: lines packed to the center of the container
 * - space-between: lines evenly distributed; the first line is at the start of the container while the last one is at the end
 * - space-around: lines evenly distributed with equal space around each line
 * - stretch (default): lines stretch to take up the remaining space
 */
@mixin flex-container-align-content($alignment) {
    -webkit-align-content: $alignment;
    -moz-align-content: $alignment;
    -ms-align-content: $alignment;
    align-content: $alignment;
}

@mixin flex-item-align($alignment) {
    -webkit-align-self: $alignment;
    -moz-align-self: $alignment;
    -ms-align-self: $alignment;
    align-self: $alignment;
}

/***** Filter *****/
@mixin filter($function) {
    -webkit-filter: $function;
    -moz-filter: $function;
    -ms-filter: $function;
    filter: $function;
}

/***** Transformation *****/
@mixin transform($execution) {
    -webkit-transform: $execution;
    -moz-transform: $execution;
    -ms-transform: $execution;
    transform: $execution;
}

@mixin transform-origin($position) {
    -webkit-transform-origin: $position;
    -moz-transform-origin: $position;
    -ms-transform-origin: $position;
    transform-origin: $position;
}

/***** Transition *****/
@mixin transition($property, $speed) {
    -webkit-transition: $property ease $speed;
    -moz-transition: $property ease $speed;
    -ms-transition: $property ease $speed;
    transition: $property ease $speed;
}

@mixin transition_with_delay($property, $speed, $delay) {
    -webkit-transition: $property ease $speed $delay;
    -moz-transition: $property ease $speed $delay;
    -ms-transition: $property ease $speed $delay;
    transition: $property ease $speed $delay;
}